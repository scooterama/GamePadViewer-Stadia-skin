/*
-How to use Custom CSS for the GamePad Viewer-
https://gamepadviewer.com/

Enabling a custom CSS is as easy as adding &css=[url to css file]
to the end of the url like so:
https://gamepadviewer.com/?p=1&css=https://gist.github.com/anonymous/526491dc02014099cd14/raw/d7bb0477ba984f794497f3f0f82cb33484dc7889/ps3.css

If you're going to be using custom CSS for the gamepad viewer
to design your own skin, we're assuming you have some sort of
basic knowledge on how CSS works. I'd also suggest uploading
your custom CSS to GitHub's gist as you can easily get the
direct link for the file by copying the link address on the
"Raw" button at the top right of the code.
NOTE: If you're using gist, MAKE SURE TO NAME YOUR CSS FILE!
It doesn't matter what you call it, so long as it ends in .css
else the site won't read it and think it's just a plain text.

Each CSS entry must be preceded by '.custom' since that's the 
hardcoded class for a custom style. It doesn't make sense to 
change this as you can only have one custom skin loaded at a time.

If you're using images, they have to be uploaded to an image host of
your choice. Personally, I'd go with Imgur since it's simple to upload
and get the direct URL of the image. None of the images in this example
will load because they're pointing to a location relative of the css 
files, since this is normally in the main CSS file of the site.

The following is a copy of the code used for displaying the PS3 controller
skin on the Gamepad viewer. You can scroll below and read the comments to
get an understanding of how the styling works and whatnot. Happy skinning!

P.S. If you use this tool often and would like to 'buy me a coffee' you can
do so via my paypal: https://paypal.me/mrmcpowned

*/

/*BEGIN PS3 Controller Styling*/
/*This class defines the base attributes of the skin*/
.controller.custom {
  /* The background image is basically the base for the controller's skin. The 
    PS3 controller's skin can be found at http://mrmcpowned.com/gamepad/ stadiawhite/base.png
    and you can observe it as an example. The sticks, buttons, and directional arrows are missing
    because their appropriate elements will be incorperated when their styling is defined below.
    The entirity of the skin's visual styling is done via background images and CSS sprites. */
  background: url( stadiawhite/base.png);
  width: 950px;
  height: 625px;
}
.custom.disconnected {
  /* This class shows an image when the controller is disconnected */
  background: url( stadiawhite/base-disconnect.png);
}
/* This hides the controller's button when disconnected so only the background image remains */
.custom.disconnected div {
  display: none;
}
.custom .triggers {
  /* The triggers are housed inside a div, so this sizes the div properly and positions it */
  width: 654px;
  height: 136px;
  position: absolute;
  left: 149px;
  top: -136px;
}
.custom .trigger {
  /* These are the actual triggers themselves */
  width: 148px;
  height: 136px;
}
.custom .trigger.pressed {
  /* The '.pressed' class is used for most buttons to signify they've been pressed */
  /* opacity: 1; */
  filter: brightness(2.5);
}
/* The left and right classes below are used to position the triggers
within the div they're contained in. Since their positions is realtive
to the size of the parent element, we simply resize the parent element 
above to achieve the desired position. */
.custom .trigger.left {
  background: url( stadiawhite/Trigger%20Left.png);
  float: left;
}
.custom .trigger.right {
  background: url( stadiawhite/Trigger%20Right.png);
  float: right;
}

/* The bumpers follow the same methodology as the triggers in terms of
placement */
.custom .bumpers {
  position: absolute;
  width: 674px;
  height: 47px;
  left: 138px;
}

.custom .bumper {
  width: 140px;
  height: 46px;
  /* background: url( stadiawhite/bumpers.png); */
}

.custom .pressed {
  /* The '.pressed' class is used for most buttons to signify they've been pressed */
  /* opacity: 1; */
  filter: invert(1);
}
.custom .bumper.pressed {
  /* The '.pressed' class is used for most buttons to signify they've been pressed */
  /* opacity: 1; */
  filter: brightness(3.5);
}
.custom .bumper.left {
  /* Call me lazy or smart, but why should I make 2 bumpers when they're symmetrical
  and I can just rotate them in the browser? Also, note that you most likely won't need
  to use a browser speficic prefix unless it's something that is indeed browser specific.
  NOTE: CLR Browser is basically chrome, so you use '-webkit-' as the browser prefix. */
  /* -webkit-transform: rotateY(180deg);
  transform: rotateY(180deg); */
  background: url( stadiawhite/Bumper%20Left.png);
  float: left;
}
.custom .bumper.right {
  background: url( stadiawhite/Bumper%20Right.png);
  float: right;
}
/* This bit of code is for the player indicator, which is represented in
quandrants on the xbox controller. That's note what it's called on the
PS3 controller but it'd be pointless for me to change the HTML for 
something as pedantic as a name. */
.custom .quadrant {
  position: absolute;
  background: url( stadiawhite/player-n.png);
  height: 17px;
  width: 111px;
  top: 140px;
  left: 240px;
}
/* Since the player indicator is just a CSS sprite, we change the 
position of the background to match the player number.
NOTE: Player orderin starts at 0, so p0 = Player 1 */
.custom .p0 {
  background-position: 0 -6px;
}
.custom .p1 {
  background-position: 0 -28px;
}
.custom .p2 {
  background-position: 0 -49px;
}
.custom .p3 {
  background-position: 0 -70px;
}
/* This is to size and position the containing div for the 
start and select buttons. */
.custom .arrows {
  position: absolute;
  width: 267px;
  height: 27px;
  top: 61px;
  left: 341px;
}
/* Setting the size and CSS sprite for the start adn select buttons */
.custom .back,
.custom .start {
  width: 49px;
  height: 27px;
}
.custom .back.pressed,
.custom .start.pressed {
}
.custom .back {
  background: url( stadiawhite/Start.png);
  float: left;
  width: 50px;
}
.custom .start {
  background: url( stadiawhite/Select.png);
  float: right;
  width: 50px;
}
/* Positioning and size of the container for the face buttons */
.custom .abxy {
  position: absolute;
  width: 152px;
  height: 170px;
  left: 683px;
  top: 53px;
}
/* base class used to simplify the sprite mapping */
.custom .button {
  position: absolute;
  width: 62px;
  height: 58px;
}
.custom .button.pressed {
 background-position-y: 2px;
  margin-top: 2px; 
}
.custom .a {
  background: url( stadiawhite/A.png);
  top: 110px;
  right: 61px;
}
.custom .b {
  background: url( stadiawhite/B.png);
  top: 55px;
  right: 1px;
}
.custom .x {
  background: url( stadiawhite/X.png);
  top: 54px;
  right: 125px;
}
.custom .y {
  background: url( stadiawhite/Y.png);
  right: 64px;
  top: -2px;
}
/* Analog sticks follow the same principles as the triggers in terms of positioning
Note that the rotation of the sticks in hard coded with javascript, so it applies 
the CSS inline. */
.custom .sticks {
  position: absolute;
  width: 405px;
  height: 98px;
  left: 273px;  
  top: 186px;
}
.custom .stick {
  position: absolute;
  /* background: url( stadiawhite/thumbs.png); */
  height: 98px;
  width: 105px;
}
.custom .stick.pressed.left {
  /* background-position-x: -106px; */
}
.custom .stick.pressed.right {
  /* background-position-x: -211px; */
}
.custom .stick.left {
  background: url( stadiawhite/Stick%20Left.png);
  top: 0;
  left: 0;
}
.custom .stick.right {
  background: url( stadiawhite/Stick%20Right.png);
  top: calc(100% - 99px);
  left: calc(100% - 107px);
}
/* Dpad possitioning and sizing 
.custom .dpad {
  position: absolute;
  width: 154px;
  height: 140px;
  left: 133px;
  top: 68px;
}
/*
.custom .face {
  /* background: url( stadiawhite/dpad.png); 
  position: absolute;
}
.custom .face.up,
.custom .face.down {
  width: 154px;
  height: 140px;
}
.custom .face.left,
.custom .face.right {
  width: 154px;
  height: 140px;
}
.custom .face.up {
  left: 50px;
  top: 0;
  background-position: 92px 0px;
}
.custom .face.down {
  left: 50px;
  top: 79px;
  background-position: 131px 0;
}
.custom .face.left {
  top: 47px;
  left: 0;
  background-position: 0px 0;
}
.custom .face.right {
  top: 47px;
  right: 0px;
  background-position: 53px 0;
}
.custom .face.pressed {
  margin-top: 5px;
  background-position-y: 52px;
} */
/* The following entries are empty because I haven't used them yet, but they
exist for the purpose of displaying a fightstick. Since fightsticks have 
the left and right triggers and digital buttons, there are separate 
html items that allow the triggers to be shown as button presses isntead of
an opacity setting */
.custom .trigger-button.left {
}
.custom .trigger-button.right {
}
.custom .trigger-button.left.pressed {
}
.custom .trigger-button.right.pressed {
}
/* This is where the fight stick CSS would go. The ideal way of 
showing the input would be to use an image sprite of a fight stick in
all 8 positions, and change it according to the inputs. The classes 
themselves are fairly self explanatory. */
.fstick {
  position: absolute;
  width: 154px;
  height: 140px;
  left: 133px;
  top: 68px;
  background: url( stadiawhite/dpad.png);
}
.fstick.up {
  background: url( stadiawhite/F-midtop.png);
}
.fstick.down {
  background: url( stadiawhite/F-midbot.png);
}
.fstick.left {
  background: url( stadiawhite/F-midleft.png);
}
.fstick.right {
  background: url( stadiawhite/F-midright.png);
}
.fstick.up.right {
  background: url( stadiawhite/F-topright.png);
}
.fstick.up.left {
  background: url( stadiawhite/F-topleft.png);
}
.fstick.down.right {
  background: url( stadiawhite/F-botright.png);
}
.fstick.down.left {
  background: url( stadiawhite/F-botleft.png);
}

/*END PS3 Controller Styling*/
